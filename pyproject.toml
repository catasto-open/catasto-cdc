[tool.poetry]
name = "cdc"
version = "0.1.0"
description = ""
authors = ["Francesco Bartoli <francesco.bartoli@geobeyond.it>"]
readme = "README.md"
packages = [
    { include = "cli.py", from = "." },
    { include = "app/cdc.py" },
    { include = "app/**/*.py" },
]

[tool.poetry.dependencies]
python = "^3.10"
nats-py = "^2.9.0"
faststream = { extras = ["nats", "docs"], version = "^0.5.33" }
fastapi = {extras = ["standard"], version = "^0.115.6"}
pydantic-settings = "^2.7.0"


[tool.poetry.group.dev.dependencies]
ipython = "^8.26.0"
black = "^23.9.1"
ruff = "^0.0.291"
pytest = "^7.4.2"
pytest-asyncio = "^0.21.1"
bandit = "^1.7.5"
mypy = "^1.5.1"
types-PyYAML = "*"
types-setuptools = "*"
types-ujson = "*"
pyupgrade-directories = "*"

# [build-system]
# requires = ["hatchling"]
# build-backend = "hatchling.build"

# [project]

# version = "0.1.0"
# name = "cdc"

# dependencies = ["faststream[nats, docs]>=0.1.5"]

# [project.optional-dependencies]
# lint = ["black==23.9.1", "ruff==0.0.291", "pyupgrade-directories"]

# static-analysis = [
#     "types-PyYAML",
#     "types-setuptools",
#     "types-ujson",
#     "mypy==1.5.1",
#     "bandit==1.7.5",
# ]

# testing = ["pytest==7.4.2", "pytest-asyncio==0.21.1"]

# dev = ["cdc[lint,static-analysis,testing]"]

[tool.pytest.ini_options]
filterwarnings = ["ignore::DeprecationWarning"]

[tool.mypy]
strict = true
python_version = "3.10"
ignore_missing_imports = true
install_types = true
non_interactive = true

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = true

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
fix = true
line-length = 88
target-version = "py310"
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
    "Q", # flake8-quotes
]
ignore = [
    "E501", # line too long, handled by black
    "C901", # too complex
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.bandit]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
